{
  "Comment": "ML container image EBS cache builder",
  "StartAt": "DefineDefaultValues",
  "States": {
    "DefineDefaultValues": {
      "Type": "Pass",
      "Comment": "Define default values used when input values are not provided",
      "Parameters": {
        "EnableFastSnapshotRestore": "${default_values.enable_fast_snapshot_restore}",
        "SnapshotName": "${default_values.snapshot_name}",
        "SnapshotDescription": "${default_values.snapshot_description}"
      },
      "ResultPath": "$.InputDefaults",
      "Next": "MergeDefaultValues"
    },
    "MergeDefaultValues": {
      "Type": "Pass",
      "Comment": "Merge default values with input values, input values take precedence",
      "Parameters": {
        "args.$": "States.JsonMerge($.InputDefaults, $$.Execution.Input, false)"
      },
      "OutputPath": "$.withDefaults.args",
      "ResultPath": "$.withDefaults",
      "Next": "RunInstance"
    },
    "RunInstance": {
      "Type": "Task",
      "Comment": "Create instance using EKS AMI",
      "Resource": "arn:aws:states:::aws-sdk:ec2:runInstances",
      "Parameters": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "Iops.$": "States.StringToJson(${ebs_volume_settings.iops})",
              "Throughput.$": "States.StringToJson(${ebs_volume_settings.throughput})",
              "VolumeSize.$": "States.StringToJson(${ebs_volume_settings.volume_size})",
              "VolumeType": "gp3"
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "DeleteOnTermination": true,
              "Iops.$": "States.StringToJson(${ebs_volume_settings.iops})",
              "Throughput.$": "States.StringToJson(${ebs_volume_settings.throughput})",
              "VolumeSize.$": "States.StringToJson(${ebs_volume_settings.volume_size})",
              "VolumeType": "gp3"
            }
          }
        ],
        "EbsOptimized": true,
        "IamInstanceProfile": {
          "Arn": "${iam_instance_profile_arn}"
        },
        "ImageId": "${ami_id}",
        "InstanceType": "${instance_type}",
        "MaxCount": 1,
        "MinCount": 1,
        "MetadataOptions": {
          "HttpEndpoint": "enabled",
          "HttpPutResponseHopLimit": 1,
          "HttpTokens": "required"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeviceIndex": 0,
            "Groups": [
              "${security_group_id}"
            ],
            "SubnetId": "${subnet_id}"
          }
        ],
        "UserData": "${base64_encoded_user_data}"
      },
      "ResultSelector": {
        "Id.$": "$.Instances[0].InstanceId"
      },
      "ResultPath": "$.Instance",
      "Next": "DescribeInstance"
    },
    "DescribeInstance": {
      "Type": "Task",
      "Comment": "Get the state of the instance",
      "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
      "Parameters": {
        "InstanceIds.$": "States.Array($.Instance.Id)"
      },
      "ResultSelector": {
        "Id.$": "$.Reservations[0].Instances[0]InstanceId",
        "State.$": "$.Reservations[0].Instances[0].State.Name"
      },
      "ResultPath": "$.Instance",
      "Next": "InstanceState"
    },
    "InstanceState": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Instance.State",
          "StringEquals": "running",
          "Next": "GetCloudInitStatus"
        },
        {
          "Or": [
            {
              "Variable": "$.Instance.State",
              "StringEquals": "shutting-down"
            },
            {
              "Variable": "$.Instance.State",
              "StringEquals": "stopping"
            },
            {
              "Variable": "$.Instance.State",
              "StringEquals": "stopped"
            }
          ],
          "Next": "TerminateInstance"
        }
      ],
      "Default": "WaitForInstanceState"
    },
    "WaitForInstanceState": {
      "Type": "Wait",
      "Comment": "Wait for the instance to be running",
      "Seconds": 10,
      "Next": "DescribeInstance"
    },
    "GetCloudInitStatus": {
      "Type": "Task",
      "Comment": "Get cloud-init status - proxy signal to determine if user-data has completed",
      "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
      "Parameters": {
        "DocumentName": "AWS-RunShellScript",
        "Parameters": {
          "commands": [
            "sudo cloud-init status"
          ]
        },
        "Targets": [
          {
            "Key": "InstanceIds",
            "Values.$": "States.Array($.Instance.Id)"
          }
        ]
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 10,
          "MaxAttempts": 10,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "Id.$": "$.Command.CommandId"
      },
      "ResultPath": "$.Command",
      "Next": "GetCloudInitStatusResults"
    },
    "GetCloudInitStatusResults": {
      "Type": "Task",
      "Comment": "Get cloud-init status results (text output from SSM command invocation)",
      "Resource": "arn:aws:states:::aws-sdk:ssm:getCommandInvocation",
      "Parameters": {
        "CommandId.$": "$.Command.Id",
        "InstanceId.$": "$.Instance.Id"
      },
      "ResultSelector": {
        "Id.$": "$.CommandId",
        "Status.$": "$.Status",
        "StandardOutputContent.$": "$.StandardOutputContent"
      },
      "ResultPath": "$.Command",
      "Next": "CommandStatus"
    },
    "CommandStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Command.Status",
          "StringEquals": "Success",
          "Next": "CloudInitStatus"
        },
        {
          "Variable": "$.Command.Status",
          "StringEquals": "Failed",
          "Next": "TerminateInstance"
        }
      ],
      "Default": "CommandStatusWait"
    },
    "CommandStatusWait": {
      "Type": "Wait",
      "Seconds": 15,
      "Next": "GetCloudInitStatusResults"
    },
    "CloudInitStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Command.StandardOutputContent",
          "StringEquals": "status: done\n",
          "Next": "GetCacheVolume"
        },
        {
          "Or": [
            {
              "Variable": "$.Command.StandardOutputContent",
              "StringEquals": "status: running\n"
            },
            {
              "Variable": "$.Command.StandardOutputContent",
              "StringEquals": "status: not started\n"
            }
          ],
          "Next": "CloudInitWait"
        }
      ],
      "Default": "TerminateInstance"
    },
    "CloudInitWait": {
      "Type": "Wait",
      "Comment": "Wait for cloud-init status to return 'done'",
      "Seconds": 60,
      "Next": "GetCloudInitStatus"
    },
    "GetCacheVolume": {
      "Type": "Task",
      "Comment": "Get volume ID to create snapshot",
      "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
      "Parameters": {
        "InstanceIds.$": "States.Array($.Instance.Id)"
      },
      "ResultSelector": {
        "Id.$": "$.Reservations[0].Instances[0]InstanceId",
        "State.$": "$.Reservations[0].Instances[0].State.Name",
        "VolumeId.$": "$.Reservations[0].Instances[0].BlockDeviceMappings[1].Ebs.VolumeId"
      },
      "ResultPath": "$.Instance",
      "Next": "CreateSnapshot"
    },
    "CreateSnapshot": {
      "Type": "Task",
      "Comment": "Create a snapshot of the cache volume",
      "Resource": "arn:aws:states:::aws-sdk:ec2:createSnapshot",
      "Parameters": {
        "Description.$": "$.SnapshotDescription",
        "TagSpecifications": [
          {
            "ResourceType": "snapshot",
            "Tags": [
              {
                "Key": "Name",
                "Value.$": "$.SnapshotName"
              }
            ]
          }
        ],
        "VolumeId.$": "$.Instance.VolumeId"
      },
      "ResultSelector": {
        "Id.$": "$.SnapshotId"
      },
      "ResultPath": "$.Snapshot",
      "Next": "DescribeSnapshot"
    },
    "DescribeSnapshot": {
      "Type": "Task",
      "Comment": "Get the state of the snapshot",
      "Resource": "arn:aws:states:::aws-sdk:ec2:describeSnapshots",
      "Parameters": {
        "SnapshotIds.$": "States.Array($.Snapshot.Id)"
      },
      "ResultSelector": {
        "Id.$": "$.Snapshots[0].SnapshotId",
        "State.$": "$.Snapshots[0].State"
      },
      "ResultPath": "$.Snapshot",
      "Next": "SnapshotState"
    },
    "SnapshotState": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Snapshot.State",
          "StringEquals": "completed",
          "Next": "UpdateSnapshotSsmParameter"
        },
        {
          "Variable": "$.Snapshot.State",
          "StringEquals": "pending",
          "Next": "SnapshotStateWait"
        }
      ],
      "Default": "TerminateInstance"
    },
    "SnapshotStateWait": {
      "Type": "Wait",
      "Comment": "Wait for the snapshot to complete and be ready for use",
      "Seconds": 30,
      "Next": "DescribeSnapshot"
    },
    "UpdateSnapshotSsmParameter": {
      "Type": "Task",
      "Comment": "Update SSM parameter with new snapshot ID",
      "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
      "Parameters": {
        "Name": "${ssm_parameter_name}",
        "Overwrite": true,
        "Value.$": "$.Snapshot.Id"
      },
      "ResultSelector": {
        "Version.$": "$.Version"
      },
      "ResultPath": "$.SsmParameter",
      "Next": "EnableFastSnapshotRestore"
    },
    "EnableFastSnapshotRestore": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.EnableFastSnapshotRestore",
          "BooleanEquals": true,
          "Next": "EnableFastSnapshotRestores"
        }
      ],
      "Default": "TerminateInstance"
    },
    "EnableFastSnapshotRestores": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ec2:enableFastSnapshotRestores",
      "Parameters": {
        "AvailabilityZones": [
          "${availability_zones}"
        ],
        "SourceSnapshotIds.$": "States.Array($.Snapshot.Id)"
      },
      "ResultSelector": {
        "Successful.$": "$.Successful"
      },
      "ResultPath": "$.FastSnapshotRestore",
      "Next": "TerminateInstance"
    },
    "TerminateInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ec2:terminateInstances",
      "Parameters": {
        "InstanceIds.$": "States.Array($.Instance.Id)"
      },
      "End": true
    }
  }
}